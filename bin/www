#!/usr/bin/env node

/**
 * Module dependencies.
 */

import { abs, server } from '../index';

const debug = require('debug')('abs:server');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	const portNumber = parseInt(val, 10);
	if (isNaN(portNumber)) {
		// named pipe
		return val;
	}
	if (portNumber >= 0) {
		// port number
		return portNumber;
	}
	return false;
}


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '8082');

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	const bind = typeof port === 'string' ?
		`Pipe ${port}` :
		`Port ${port}`;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ?
		`pipe ${addr}` :
		`port ${addr.port}`;
	debug(`Listening on ${bind}`);
	console.log(`Listening on ${bind}`);
}

abs.set('port', port);


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
